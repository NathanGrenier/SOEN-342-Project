CREATE TYPE DAY_OF_WEEK AS ENUM (
    'Sunday',
    'Monday',
    'Tuesday',
    'Wednesday',
    'Thursday',
    'Friday',
    'Saturday'
);

CREATE TABLE IF NOT EXISTS City (
    CI_ID INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    CI_NAME VARCHAR(255) NOT NULL,
    CI_PROVINCE VARCHAR(100) NOT NULL
);

CREATE TABLE IF NOT EXISTS Location (
    L_ID INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    L_FACILITY VARCHAR(255) NOT NULL,
    L_ROOM_NAME VARCHAR(255) NOT NULL,
    L_TYPE VARCHAR(100) NOT NULL,
    CI_ID INT NOT NULL,
    FOREIGN KEY (CI_ID) REFERENCES City(CI_ID)
);

CREATE TABLE IF NOT EXISTS Admin (
    A_ID INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    A_NAME VARCHAR(255),
    A_USERNAME VARCHAR(255) NOT NULL UNIQUE,
    A_PASSWORD VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS Client (
    C_ID INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    C_NAME VARCHAR(255) NOT NULL,
    C_USERNAME VARCHAR(255) NOT NULL UNIQUE,
    C_PASSWORD VARCHAR(255) NOT NULL,
    C_AGE INT NOT NULL,
    GUARDIAN_ID INT,
    FOREIGN KEY (GUARDIAN_ID) REFERENCES Client(C_ID) ON DELETE SET NULL
);

CREATE TABLE IF NOT EXISTS Instructor (
    I_ID INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    I_NAME VARCHAR(255) NOT NULL,
    I_USERNAME VARCHAR(255) NOT NULL UNIQUE,
    I_PASSWORD VARCHAR(255) NOT NULL,
    I_PHONE VARCHAR(20) NOT NULL,
    CONSTRAINT valid_phone CHECK (I_PHONE ~ '^([0-9]{3})\-([0-9]{3})\-([0-9]{4})$')
);

CREATE TABLE IF NOT EXISTS Instructor_City (
    I_ID INT,
    CI_ID INT,
    PRIMARY KEY (I_ID, CI_ID),
    FOREIGN KEY (I_ID) REFERENCES Instructor(I_ID) ON DELETE CASCADE,
    FOREIGN KEY (CI_ID) REFERENCES City(CI_ID)
);

CREATE TABLE IF NOT EXISTS Specialization (
    S_ID INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    S_NAME VARCHAR(255) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS Instructor_Specialization (
    I_ID INT,
    S_ID INT,
    PRIMARY KEY (I_ID, S_ID),
    FOREIGN KEY (I_ID) REFERENCES Instructor(I_ID) ON DELETE CASCADE,
    FOREIGN KEY (S_ID) REFERENCES Specialization(S_ID)
);

CREATE TABLE IF NOT EXISTS Schedule (
    SC_ID INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    SC_START_DATE DATE NOT NULL,
    SC_END_DATE DATE NOT NULL,
    CONSTRAINT valid_date_range CHECK (SC_END_DATE >= SC_START_DATE)
);

CREATE TABLE IF NOT EXISTS Time_Slot (
    TS_ID INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    TS_DAY DAY_OF_WEEK NOT NULL,
    TS_START_TIME TIME NOT NULL,
    TS_END_TIME TIME NOT NULL,
    SC_ID INT NOT NULL,
    FOREIGN KEY (SC_ID) REFERENCES Schedule(SC_ID) ON DELETE CASCADE,
    CONSTRAINT valid_time_range CHECK (TS_END_TIME > TS_START_TIME)
);

CREATE OR REPLACE FUNCTION set_o_is_private()
RETURNS TRIGGER AS $$
BEGIN
    NEW.O_IS_PRIVATE := (NEW.O_MAX_CAPACITY = 1);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TABLE IF NOT EXISTS Offering (
    O_ID INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    O_LESSON VARCHAR(255) NOT NULL,
    O_MAX_CAPACITY INT NOT NULL,
    O_CURRENT_CAPACITY INT NOT NULL DEFAULT 0,
    O_IS_PRIVATE BOOLEAN NOT NULL,
    I_ID INT,
    L_ID INT,
    SC_ID INT NOT NULL,
    FOREIGN KEY (I_ID) REFERENCES Instructor(I_ID) ON DELETE SET NULL,
    FOREIGN KEY (L_ID) REFERENCES Location(L_ID) ON DELETE CASCADE,
    FOREIGN KEY (SC_ID) REFERENCES Schedule(SC_ID) ON DELETE CASCADE,
    CHECK (O_IS_PRIVATE = (O_MAX_CAPACITY = 1)),
    CHECK (O_CURRENT_CAPACITY <= O_MAX_CAPACITY),
    CHECK (O_CURRENT_CAPACITY >= 0),
    CHECK (O_MAX_CAPACITY > 0)
);

CREATE TRIGGER before_insert_offering
BEFORE INSERT ON Offering
FOR EACH ROW
EXECUTE FUNCTION set_o_is_private();

CREATE TRIGGER before_update_offering
BEFORE UPDATE ON Offering
FOR EACH ROW
EXECUTE FUNCTION set_o_is_private();

CREATE OR REPLACE FUNCTION update_o_current_capacity()
RETURNS TRIGGER AS $$
BEGIN
    -- Update the offering's current capacity
    UPDATE Offering
    SET O_CURRENT_CAPACITY = (
        SELECT COUNT(*)
        FROM Booking
        WHERE O_ID = CASE
            WHEN TG_OP = 'DELETE' THEN OLD.O_ID
            ELSE NEW.O_ID
        END
    )
    WHERE O_ID = CASE
        WHEN TG_OP = 'DELETE' THEN OLD.O_ID
        ELSE NEW.O_ID
    END;
    
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE TABLE IF NOT EXISTS Booking (
    C_ID INT,
    O_ID INT,
    PRIMARY KEY (C_ID, O_ID),
    FOREIGN KEY (C_ID) REFERENCES Client(C_ID) ON DELETE CASCADE,
    FOREIGN KEY (O_ID) REFERENCES Offering(O_ID) ON DELETE CASCADE
);

CREATE TRIGGER after_booking_change
AFTER INSERT OR DELETE ON Booking
FOR EACH ROW
EXECUTE FUNCTION update_o_current_capacity();