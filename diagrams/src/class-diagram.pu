@startuml Class Diagram
title Class Diagram
skinparam classAttributeIconSize 0
hide empty members
skinparam linetype ortho

package Main {
    class InstructorRecords as "Users::InstructorRecords"  {}
    class Client as "Users::Client" {}
    class Instructor as "Users::Instructor" {}
    
    class App {
        -{static} instance: App
        -currentUser: User
        --
        +App getInstance()
        +void login(String username, String password)
        +void logout()
        +void registerClient(String name, String username, 
        String password, int age, String guardianUserName)
        +boolean validateAge(int age)
        +void registerInstructor(String name, String username, String password, 
        String phone,String[] specializationNames,String[] cityNames)
        +boolean validatePhone(String phone)
        +void displayUsers(String userType)
        +void displaySpecializations()
        +void displayCities()
        +void createBooking(int offeringId)
        +void viewClientBookings()
        +void viewClientBookings(String username)
        +void cancelBooking(int offeringId)
        +void updateGuardian(String username)
        +void displayCurrentGuardian()
        +void displayLocations()
        +void clientViewPublicOfferings()
        +void viewInstructorAvailableOfferings()
        +void instructorViewAllOfferings()
        +void adminViewOfferings()
        +void publicViewOfferings()
        +void acceptInstructorLesson(int offeringId)
        +void adminCreateOffering(String lesson, int locationId, 
        List<String> timeSlots, int maxCapacity, LocalDate startDate, LocalDate endDate)
        +void deleteUser(String userType, String username)
        +void getCurrentUserType()
    }

    class Terminal {
        {static} scanner: Scanner
        {static} running: boolean
        --
        +void displayMenu(String userType)
        +void handleClientOperation(int operation)
        +void handleInstructorOperation(int operation)
        +void handleAdminOperation(int operation)
        +void handlePublicOperation(int operation)
    }

    class Booking {}

    class BookingRecords {
        -{static} instance: BookingRecords
        -bookings: Map<Integer, Booking>
        --
        +BookingRecords getInstance()
        +void fetchAllBookings()
        +void pruneBookingsWithoutInstructor()
        +void createBooking(Offering offering, Client client)
        +void cancelBooking(Offering offering, Client client)
        +void displayClientBookings(Client client)
        +void clientDisplayPublicOfferings(Client client)
        +void addBooking(Booking booking)
    }

    class City {
        -id: int 
        -name: String 
        -province: String 
    }

    class CityRecords {
        -{static} instance: CityRecords
        -cities: Map<Integer, City>
        --
        +CityRecords getInstance()
        +void fetchAllCities()
        +City createCity(String name, String province)
        +void displayCities()
        +void addCity(City city)
    }

    class Location {
        -id: int 
        -facility: String 
        -roomName: String 
        -type: String
    }

    class LocationRecords {
        -{static} instance: LocationRecords
        -locations: Map<Integer, Location>
        --
        +LocationRecords getInstance()
        +void fetchAllLocations()
        +void displayLocations()
        +void addLocation(Location location)
    }

    class Offering {
        -id: int
        -lesson: String 
        -maxCapacity: int 
        /isPrivate: boolean 
        /currentCapacity
    }

    class OfferingRecords {
        -{static} instance: OfferingRecords
        -offerings: Map<Integer, Offering>
        --
        +OfferingRecords getInstance()
        +void fetchAllOfferings()
        +void displayOfferings(Map<Integer, Offering> offerings)
        +void createOffering(String lesson, int maxCapacity, Location location, 
        Date startDate, Date endDate,
            List<String> timeSlots, ScheduleRecords scheduleRecords)
        + void updateOfferingInstructors(Instructor instructor, Offering offering)
        +void addOffering(Offering offering)
    }

    class Schedule {
        -id: int 
        -startDate: Date 
        -endDate: Date 
        --
        +{static} void displaySchedule(Schedule schedule)
        +{static} void printTimeSlotsTable(Map<Integer, TimeSlot> timeSlots)
    }

    class ScheduleRecords {
        -{static} instance: ScheduleRecords
        -schedules: Map<Integer, Schedule>
        --
        +ScheduleRecords getInstance()
        +void fetchAllSchedules()
        +int createSchedule(Date startDate, Date endDate, List<String> timeSlots)
        +int[] createTimeSlots(List<String> timeSlots)
        +void deleteSchedule(int scheduleId)
        +void addSchedule(Schedule schedule)
    }

    class TimeSlot {
        -id: int 
        -day: DayOfWeek
        -startTime: Time 
        -endTime: Time 
    }

    enum DayOfWeek {
        SUNDAY
        MONDAY
        TUESDAY
        WEDNESDAY
        THURSDAY
        FRIDAY
        SATURDAY 
    }

    App "1" <-up- "1" Terminal
    App --> OfferingRecords
    App --> BookingRecords
    App -> InstructorRecords
    App -> CityRecords
    App -> LocationRecords
    App --> ScheduleRecords

    InstructorRecords -> CityRecords

    City -* CityRecords

    Location "*" -up-> "1" City: in

    LocationRecords --> CityRecords
    LocationRecords *-up- Location
    LocationRecords <-- OfferingRecords

    Schedule *- TimeSlot: has

    ScheduleRecords *-- Schedule
    ScheduleRecords <-- OfferingRecords

    Offering --* OfferingRecords
    Offering "1" --> "1" Schedule: at
    Offering "1" --> "1" Location: in

    OfferingRecords -> InstructorRecords

    Instructor "1" -- "*" City: availableIn
    Instructor "0..1" <-- "*" Offering: taughtBy

    Client "*" -- "*" Offering

    (Client, Offering) -- Booking
    Booking --* BookingRecords

    ' Position DayOfWeek enum
    DayOfWeek - Empty
    Empty -- TimeSlot
    hide Empty
}

@enduml
