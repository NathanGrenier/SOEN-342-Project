@startuml Class Diagram
title Class Diagram

hide empty members
skinparam linetype ortho

package Main {
    class Terminal {}
    class App {
        -User currentUser
        +void login(String username, String password)
        +void logout()
        +void registerClient(String name, String username, String password, int age, String guardianUserName)
        +void registerInstructor(String name, String username, String password, String phone,String[] specializationNames,String[] cityNames)
        +void displayUsers(String userType)
        +void displaySpecializations()
        +void displayCities()
        +void clientViewPublicOfferings()
        +void createBooking(int offeringId)
        +void viewClientBookings()
        +void viewClientBookings(String username)
        +void cancelBooking(int offeringId)
        +void updateGuardian(String username)
        +void displayCurrentGuardian()
        +void deleteUser(String userType, String username)
        +void viewInstructorAvailableOfferings()
    }

    class InstructorRecords {
        +void fetchAllInstructors()
        +void displayInstructors()
        +void void deleteInstructor(String username)
        +void addInstructor(Instructor instructor)
    }
    class Instructor {}
    class ClientRecords {
        +void fetchAllClients()
        +void displayClients()
        +void deleteClient(String username)
        +void updateGuardian(Client client, Client guardian)
        +void addClient(Client client)
    }
    class Client {
        -int age
        -int guardianId
    }
    class RegistrationService {
        +Client registerClient(String name, int age, String username, String password, String guardianUserName,Map<Integer, Client> clients)
        +Instructor registerInstructor(String name, String username, String password, String phoneNumber,String[] specializationNames, String[] cityNames, InstructorRecords instructorRecords,
            CityRecords cityRecords, SpecializationRecords specializationRecords)
    }
    class AuthenticationService{
        +User login(String username, String password, Map<Integer, Client> clients,Map<Integer, Instructor> instructors,
            Map<Integer, Admin> admins)
        +void logout(User currentUser)
    }   
    class CityRecords {
        +void fetchAllCities()
        +City createCity(String name, String province)
        +void displayCities() 
        +addCity(City city)
    }
    class City {
        -int id
        -string name
        -string province
    }
    class LocationRecords {
        +void fetchAllLocations()
    }
    class Location {
        -int id
        -string facility
        -string roomName
        -string type
        +void addLocation(Location location)
    }

    class ScheduleRecords {
        +void fetchAllSchedules()
        +addSchedule(Schedule schedule)
    }
    class Schedule {
        -int id
        -Date startDate
        -Date endDate
    }
    class TimeSlot {
        -int id
        -DayOfWeek day
        -Time startTime
        -Time endTime
    }

    class OfferingRecords {
        +void fetchAllOfferings()
        +void displayOfferings(Map<Integer, Offering> offerings)
        +void addOffering(Offering offering)
    }
    class Offering {
        -int id
        -string lesson
        -int maxCapacity
        -boolean isPrivate
        /currentCapacity
        /isPrivate
    }

    class BookingRecords {
        +void fetchAllBookings()
        +void createBooking(Offering offering, Client client)
        +void cancelBooking(Offering offering, Client client)
        +void displayClientBookings(Client client)
        +void clientDisplayPublicOfferings(Client client)
        +void addBooking(Booking booking)
    }
    class Booking {
    }

    App "1" <-up- "1" Terminal
    App --> OfferingRecords
    App --> BookingRecords
    App -> InstructorRecords
    App -> CityRecords
    App -> AdminRecords
    App -> LocationRecords
    App -> ClientRecords
    App -> RegistrationService
    App -> AuthenticationService
    InstructorRecords -> CityRecords

    City -* CityRecords

    Location "*" --> "1" City: in

    LocationRecords --> CityRecords
    LocationRecords *-- Location
    LocationRecords <-- OfferingRecords

    Schedule *- TimeSlot: has

    ScheduleRecords *-- Schedule
    ScheduleRecords <-- OfferingRecords

    Offering --* OfferingRecords
    Offering "1" --> "1" Schedule: at
    Offering "1" --> "1" Location: in

    OfferingRecords -> InstructorRecords

    Instructor "1" -- "*" City: availableIn
    Instructor "0..1" <-- "*" Offering: taughtBy

    Client "*" -- "*" Offering

    (Client, Offering) -- Booking
    Booking --* BookingRecords
}
@enduml