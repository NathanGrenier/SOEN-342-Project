@startuml Class Package Diagram
title Class Package Diagram
skinparam classAttributeIconSize 0
hide empty members
skinparam linetype ortho

package Main{}
package Users {
    class App as "Main::App"{}

    abstract User {
        -id: int 
        -name: String 
        -username: String 
        -password: String 
    }
    class Admin {
    }
    class AdminRecords {
        -{static} instance: AdminRecords 
        -admins: Map<Integer, Admin> 
        --
        +AdminRecords getInstance()
        +void fetchAllAdmins()
        +void displayAdmins()
        +void addAdmin(Admin admin)
    }
    class Client {
        -age: int 
        -guardianId: int 
        -guardian: Client 
    }
    class ClientRecords {
        -{static} instance: ClientRecords
        -clients: Map<Integer, Client> 
        --
        +ClientRecords getInstance()
        +void fetchAllClients()
        +void displayClients()
        +void deleteClient(String username)
        +void updateGuardian(Client client, Client guardian)
        +void addClient(Client client)
    }
    class Instructor {
        -phoneNumber: String 
        -specializations: Map<Integer, Specialization>
        -cities: Map<Integer, City>
    }
    class InstructorRecords {
        -{static} instance: InstructorRecords
        -instructors: Map<Integer, Instructor> 
        --
        +InstructorRecords getInstance()
        +void fetchAllInstructors()
        +void displayInstructors()
        +void deleteInstructor(String username)
        +void addInstructor(Instructor instructor)
    }
    class Specialization {
        -id: int 
        -name: String 
    }
    class SpecializationRecords {
        -{static} instance: SpecializationRecords
        -specializations: Map<Integer, Specialization>
        --
        +SpecializationRecords getInstance()
        +void fetchAllSpecializations()
        +Specialization createSpecialization(String name)
        +void displaySpecializations()
        +void addSpecialization(Specialization specialization)
    }
    
    App --> AdminRecords
    App --> ClientRecords
    App --> SpecializationRecords

    User <|-down- Client
    User <|-right- Instructor
    User <|-left- Admin
    
    AdminRecords *- Admin

    Client "0..1" -- "1" Client: guardianOf

    ClientRecords *-left- Client

    SpecializationRecords *- Specialization
    
    Instructor "1" -- "*" Specialization: specializesIn

    InstructorRecords *- Instructor
    InstructorRecords -left-> SpecializationRecords
}

package services {
    class App as "Main::App"
    class RegistrationService {
        -{static} instance: RegistrationService
        --
        +Client registerClient(String name, int age, String username, String password, String guardianUserName, Map<Integer, Client> clients)
        +Instructor registerInstructor(String name, String username, String password, String phoneNumber, String[] specializationNames, String[] cityNames, InstructorRecords instructorRecords, CityRecords cityRecords,  SpecializationRecords specializationRecords)
        +boolean validateAge(int age)
        +boolean validatePhone(String phone)
    }
    class AuthenticationService {
        -{static} instance: AuthenticationService
        --
        + AuthenticationService getInstance()
        +User login(String username, String password, Map<Integer, Client> clients, Map<Integer, Instructor> instructors, Map<Integer, Admin> admins)
        +void logout(User currentUser)
    }
    
    App -up-> RegistrationService
    App -right-> AuthenticationService
}

package config {
    class AdminRecords as "Users::AdminRecords"{}
    class ClientRecords as "Users::ClientRecords"{}
    class InstructorRecords as "Users::InstructorRecords"{}
    class SpecializationRecords as "Users::SpecializationRecords"{}
    class BookingRecords as "Main::BookingRecords"{}
    class CityRecords as "Main::CityRecords"{}
    class LocationRecords as "Main::LocationRecords"{}
    class OfferingRecords as "Main::OfferingRecords"{}
    class ScheduleRecords as "Main::ScheduleRecords"{}
    
    class DatabaseConfig {
        -{static} flywayProps: Properties 
        -{static} URL: String 
        -{static} USER: String
        -{static} PASSWORD: String
        --
        -{static} Properties loadFlywayProperties()
        +{static} Connection getConnection()
        +{static} void migrateDatabase()
    }
    AdminRecords -up-> DatabaseConfig
    ClientRecords -up-> DatabaseConfig
    InstructorRecords -up-> DatabaseConfig
    SpecializationRecords -left-> DatabaseConfig
    BookingRecords -right-> DatabaseConfig
    CityRecords -up-> DatabaseConfig
    LocationRecords -down-> DatabaseConfig
    OfferingRecords -down-> DatabaseConfig
    ScheduleRecords -down-> DatabaseConfig
}
Main .left.> config
Main .up.> services
Main .down.> Users

@enduml
